
if($user !== $account)
        {
            echo "Not user profile";
            foreach ($profiles->follow as $following)
            {
                if($following->pivot ->where('follow_id', $account) ->where('user_id', $user))
                {
                    echo 'Already followers';
                } else {
                    echo 'follow route link';
                }
            }
        } else {
            echo 'User Profile';
        }



App\Models\Price::with('prices')->get();


       <td colspan="3">
                <a href="#" id="{!! $product->id !!}" class="publish">
                 &nbsp;   <img id="publish-image-{!! $product->id !!}" src="{!! url('/assets/images') !!}/{!! ($product->is_published) ? 'publish.png' : 'not_publish.png'  !!}"/>
                </a>
            </td>

placeholderhttps://placehold.it/800x600/1A5276/FFFFFF?text=placeholder+image


                // var randomnumber=Math.floor(Math.random()*110)
              //  $('table#product-pricing-table input[name*="quantity"]').val( randomnumber );
              //
 https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css
cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.0/bootstrap-table.min.css
https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js

https://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js

https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js
cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.0/bootstrap-table.min.js



$request->file('img_1')->move(public_path('images'), $request->file('img_1')->getClientOriginalName());

use WithoutMiddleware;

 public function store(Request $request)
    {
//        $request = $request->all();
//        var_dump($request);
        /**
         * Validate the submitted Data
         */
        $this->validate($request, [
            'name' => 'required',
          //  'manufacturer' => 'required',
           // 'details' => 'required',
         //   'categories' => 'required',
         //   'thumbnail' => 'required|image',
        ]);
        if ($request->hasFile('album')) {
            foreach ($request->album as $photo) {
                if ($photo && strpos($photo->getMimeType(), 'image') === false) {
                    return \Redirect()->back();
                }
            }
        }
        /**
         * Upload a new thumbnail
         */
        $dest = "tests/";
//        $name = str_random(11)."_".$request->file('thumbnail')->getClientOriginalName();
        $name = $request->file('thumbnail')->getClientOriginalName();
        $name2 = $request->file('thumbnail2')->getClientOriginalName();
        $request->file('thumbnail')->move($dest, $name);
        $request->file('thumbnail2')->move($dest, $name2);
        $product = $request->all();
        $product['thumbnail'] = "/".$dest.$name;
        $product['thumbnail2'] = "/".$dest.$name2;
        $product = Product::create($product);
        /**
         * Upload Album Photos
         */
//        if ($request->hasFile('album')) {
//            foreach ($request->album as $photo) {
//                if ($photo) {
//                    $name = str_random(11)."_".$photo->getClientOriginalName();
//                    $photo->move($dest, $name);
//                    AlbumPhoto::create([
//                        'product_id' => $product->id,
//                        'photo_src' => "/".$dest.$name,
//                        'alt' => $request->alt,
//                        'caption' => $request->caption,
//                        'photoinfo' => $request->photoinfo
//                    ]);
//                }
//            }
//        }
//        if ($request->has('prices')){
//           // vardump($request);
//            foreach ($request->prices as $price) {
//                $price = $request->all();
//
//                $price = Price::create([
//                    'product_id' => $product->id,
//                    'price' => $request->get('price'),
//                    'model' => $request->get('model'),
//                    'sku' => $request->get('sku'),
//                    'upc' => $request->get('upc'),
//                    'quantity' => $request->get('quantity')
//
//                ]);
//            }
//
//            var_dump('price added successfully '.  $request->get('price'));
//        }
//
//
//
//        $price = $product->price = new App\Models\Price([
//            'price'        => $request->get('price'),
//            'sku'         => $request->get('sku'),
//            'upc'       => $request->get('upc'),
//            'model' => $request->get('model'),
//            'quantity' => $request->get('quantity')
//        ]);
//
//        $product->price()->save($price);
        if ($request->has('prices')){
            echo "it has price";
        }


'price' => $price['price'],
'model' => $price['model'],
'sku' => $price['sku'],
'upc' => $price['upc'],
'quantity' => $price['quantity']

        $shop = Shop::find($shop_id);
$shop->products()->attach($product_id);

{!! ($product->is_published) ? 'publish.png' : 'not_publish.png'  !!}


registration key for




Turbo Searcher v2.10
name: nmSpAwN
s/n: 2EF83673DA75FA9D



Turbo Searcher v2.20
name: SpAwN
s/n: 9D7661BB2502A27



"Turbo Searcher Network Edition 3.50 build 070207 Register Code"
Knownsoft Turbo Searcher Standard Version v3 50 Build 070207 Retail Incl keymaker-ZWT



Name: www.serials.ws Code: 6D0AF609F6EE1382



lh+Tie1yNw8va1OdrXKoPrE3SMVbxdamY0jtWrucstJZhejYRzvcNCXengs0irIe1KSypLmGfxUQFAgsj071
lh+Tie1yNw8va1OdrXKoPrE3SMVbxdamY0jtWrucstI1Ttdkn3KrhSXengs0irIeKWn04oRy3XkQFAj0hjFr
lh+Tie1yNw8va1OdrXKoPrE3SMVbxdamY0jtWrucstJaiklOQBJWwiXengs0irIeT5LMo9NBb&UQFAj75kNK
lh+Tie1yNw8va1OdrXKoPrE3SMVbxdamY0jtWrucstLm3z27wUDcOyXengs0irIemSBvBulxoDgQFAhFthpb
lh+Tie1yNw8va1OdrXKoPrE3SMVbxdamY0jtWrucstJahx54hnftISXengs0irIeDfxCSDZn1RcQFAirK6Ho












foreach
($shop->products as $product)
{
echo $product->pivot->price;
}



    @if($products->isEmpty())
                <div class="well text-center">No Products found.</div>
            @else
                @include('products.table')
            @endif


{!!  Joanvt\MediaManager\MediaManager::lists(Media::where('status','A')->orderBy('id','DESC'))  !!}




//        foreach ($request->prices as $price_id) {
//
//            Price::create([
//                'product_id' => $product->id,
//                'price' => $request->get('price'),
//                'model' => $request->get('model'),
//                'sku' => $request->get('sku'),
//                'upc' => $request->get('upc'),
//                'quantity' => $request->get('quantity')
//
//            ]);
//
//            ProductPrice::create([
//                'price_id' => $product->id,
//                'product_id' => $price_id
//            ]);
//        }
//
//
//        if ($request->has('price')){
//
//                foreach ($request->price as $price) {
//                        $price = new Price();
//                        $price->product_id = $product->id;
//                        $price->price = $request->price;
//
//                    $product->prices()->save($price);
//                ;
//                    }
//
//            }
        /**
         * Linking the categories to the product
         */
        foreach ($request->categories as $category_id) {
            CategoryProduct::create([
                'category_id' => $category_id,
                'product_id' => $product->id
            ]);
        }
        /**
         * Linking the options to the product
         */
        if ($request->has('options')){
            foreach ($request->options as $option_details) {
                if (!empty($option_details['name']) && !empty($option_details['values'][0]) ) {
                    $option = Option::create([
                        'name' => $option_details['name'],
                        'product_id' => $product->id
                    ]);
                    foreach ($option_details['values'] as $value) {
                        OptionValue::create([
                            'value' => $value,
                            'option_id' => $option->id
                        ]);
                    }
                }
            }
        }
        if (!empty($request->attribute_name))
        {
            foreach ($request->attribute_name as $key => $item)
            {
                $productVariant                          = new ProductVariant();
                $productVariant->attribute_name          = $item;
                $productVariant->product_attribute_value = $request->product_attribute_value[$key];
                $product->productVariants()->save($productVariant);
            }
        }
        if (!empty($request->feature_name))
        {
            foreach ($request->feature_name as $feature)
            {
                $productFeature               = new ProductFeature();
                $productFeature->feature_name = $feature;
                $product->productFeatures()->save($productFeature);
            }
        }




        dd($request);
        return \Redirect('/admin/products')->with([
            'flash_message' => 'Product Created Successfully'
        ]);
    }
