ssh root@104.130.169.19
FrQHeEMsR4ur
cd ../var/www/vhosts/gracecompany/

alias productcontroller='subl /var/www/vhosts/gracecompany/stage.grace/app/Http/Controllers/ProductController.php'
alias shop='subl /var/www/vhosts/gracecompany/stage.grace/resources/views/frontend/shop/index.blade.php'
alias product='subl /var/www/vhosts/gracecompany/stage.grace/resources/views/frontend/shop/product.blade.php'
alias res='cd /var/www/vhosts/gracecompany/stage.grace/resources/'
alias resb='cd /var/www/vhosts/gracecompany/stage.grace/resources/views/backend'
alias resf='cd /var/www/vhosts/gracecompany/stage.grace/resources/views/frontend'

alias restarta='service httpd restart && service httpd reload'
alias restartall='service httpd restart && service httpd reload && service varnish restart && service varnish reload'
alias restartv='service varnish restart && service varnish reload'

git clone phillipmadsen@gmail.com:~/hidden/test.git test
exit

git clone username@domain.com:~/repos/mywebsite.git mywebsite
git clone test@104.130.13.157:~/repos/test.git test.devto

alias vm="ssh test@104.130.13.157 -p test"
write and quite
escape :wq

edit file
i
/var/www/sandbox/

serve domain.app /home/vagrant/repos/sites/domain.app

serve domain.app /home/vagrant/Code/path/to/public/directory


alias vm="ssh vagrant@127.0.0.1 -p 2222"
vagrant destroy --force
https://vimeo.com/45858333

ssh test@104.130.13.157
sudo -i  gives root priv

:%s/name/replace/
alias stagevm="ssh root@104.130.169.19 -p 22000"

alias stagevm="ssh root@104.130.169.19 -p 22000"


ssh -i ~/.ssh/github_rsa.pub pmadsen2013@gmail.com


git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAonbrgBaPxsdnXA0109qmx+w9v9H+orYnhcY7lf
lrHait0duMjJPrOkGRy1tKgNXdQwJcowoOuXHQSW0w/QjK7DAzKF0L/BCiZr7tnsJ77bzr8e0J
PZ+WdHjlYCLVuw9cioxuTnf4bvRq94sNvr+Y99PgGV4XUsKpnDlXEU9jPqsXITDznFfE7loNjM
53wTij2b4NGX8JYcLNmNHg4sCWG1SfMiSRrfKjsc1RxzOF6H+Y1xvApbmMt1hDd0e/zMpXeLOl
1pRw+TYFLqqJttxQ21tBEEFoPHiEr/iT5tjoUujA+fUzbTAhMy5UvlRzhw== root@web01

phillipspassword

git config --global alias.vmstage="ssh root@104.130.169.19 -p  "

alias vm="ssh test@104.130.13.157 -p (stands for port)


alias staged="ssh root@104.130.169.19"
\\ DB01



67.214.252.130



MYSQL TUNNEL CONNECT
ssh host= 162.242.218.155
ssh port= 22
ssh user= root
ssh pass= phillipspassword

gracefiles



1- go to your windows control panel
2- user accounts
3- new user account Call it SANDBOX PASSWORD SANDBOX
4- login to new account
5- install sublimetext3
6- install vagrant https://www.vagrantup.com/downloads.html
7- install composer https://getcomposer.org/doc/00-intro.md#using-the-installer
8- install virtualbox https://www.virtualbox.org/wiki/Downloads
9- if you dont have it install winrar
10- install windows github
11- when you are ready i will walk you through setting this up but here is the repository link to clone
git@github.com:phillipmadsen/sx-dev.git


ssh root@104.130.169.19
FrQHeEMsR4ur

command mode
:
:q (quit)

i or o (insert or new line edit)






$content = Content::with('category')->lists('category.name', 'id');

// in the view
<ul>
    @foreach ($AllContent as $id => $category)
        <li>
            {{ $id }} - {{ $category }}
        </li>
    @endforeach
</ul>



https://github.com/etrepat/baum



ssh root@162.242.218.155
phillipspassword

service httpd restart
service httpd reload
service varnish restart
service varnish reload
mysql -h 10.176.138.198 -u local_dev -p
mysql -h 10.176.138.198 -u graceuser -p

git@github.com:phillipmadsen/stage.grace.git

chown apache:apache storage/ -R
grep Root /etc/httpd/vhost.d/stage.grace.conf

curl localhost:8080 -H "host: stage.grace"

gracefiles


'driver'    => 'mysql',
			'host'      => '10.176.138.198',
			'database'  => 'dev_grace',
			'username'  => 'local_dev',
			'password'  => 'local_dev2015',


oc2LWvciwVct

git config --global --unset alias.ssh

git clone git@github.com:phillipmadsen/dev.grace.git ./


chmod +x .git/hooks/post-commit

rm -rf .git/


The command in its simpliest form looks like:

rm myFile.txt myFile1.txt myFile2.txt …etc…
You would notice however that listing all files/folders that need to be deleted can be quite time consuming. Fortunately, rm accepts several arguments which can ease us. In the above example, we could type:

rm myFile*.txt
To delete a whole folder and its content recursively, you can use:

rm -rf foldername/

To delete all files/folders in the current directory, without deleting the directory itself, you would need to use:

rm -rf *
https://www.siteground.com/tutorials/ssh/ssh_deleting.htm


\\ WEB 01
ssh root@104.130.169.19
FrQHeEMsR4ur
cd ../var/www/vhosts/gracecompany/dev.grace

git clone git@github.com:phillipmadsen/local.grace.dev.git dev.grace
git@github.com:phillipmadsen/local.grace.dev.git

git remote add origin git@github.com:phillipmadsen/local.grace.dev.git dev.grace
git push origin dev.grace

git remote rename gitrepo pmlocaldev-github


git clone user@git.example.com:/opt/git/my_project.git
cd ../var/www/vhosts/gracecompany/

ssh root@104.130.169.19
FrQHeEMsR4ur

-----------------
Host github-project1
    User git
    HostName github.com
    IdentityFile ~/.ssh/github.project1.key</p>
Host github-org
    User git
    HostName github.com
    IdentityFile ~/.ssh/github.org.key</p>
Host github.com
    User git
    IdentityFile ~/.ssh/github.key
-----------------

git remote add origin git@github.com:phillipmadsen/devgrace.git
git push -u origin master

ssh-keygen -t rsa -C "pmadsen2013@gmail.com"



scp –P 50001 root@104.130.169.19:phillips ./phillips


Host github.com
 	IdentityFile /c/Users/sandbox/.ssh/github_rsa


 	   Production        - Production server which already have codes
            ↑
         Staging          - New staging server, will install Trac too
         ↗↙ ↖↘
  Developer1  Developer2  - Local development




As requested, you will need to return a view with the categories variable

 return view('view.name',compact('categories');
then

  {{dd($categories)}}
or

 <? print_r($categories); ?>
in your view and it will output the data. You can access a specific value by

 @foreach($categories as $category)
    {{$category->name}}
 @endforeach
assuming you are using blade and you have a name value in your categories collection.



$categories = Category::with('subcategories')->where('category_name', '=', 'Construction Machines')->get(); return $categories;







  //Method add post. Called in the controller
    public static function add($data)
    {
        try {
            $post = new Post;
            $post->title = $data['title'];
            $post->text = $data['text'];

            $category = Category::find(1);
            $category->posts()->save($post);
        }catch (Exception $e){
            return $e;
        }

        return $category;
    }










------------------------------------------------------------------


I have no idea why you don't want to use an SQL JOIN, as it is almost certainly the most efficient thing to do when you have one table relating to another by its primary key. But hey, who am I to judge?

A way you can do this is by using a subquery. In plain old SQL:

SELECT
    `content`.`id`,
    (
        SELECT `name`
        FROM `category`
        WHERE `id` = `content`.`category_id`
    ) AS `name`
FROM `content`
So, to do this using Laravel's query builder:

DB::table('content')
    ->select(['id'])
    ->selectSub(function ($query) {
        return $query->from('category')
                     ->where('id', '=', DB::raw('content.category_id'))
                     ->select('name')
    }, 'name')
    ->get();
I think that'll do what you want, anyway. But really, just use a JOIN.

If you do want to use a JOIN then you're somewhat better off. Again I'll give you the raw SQL first:

SELECT
    `content`.`id`,
    `category`.`name`
FROM `content`
LEFT JOIN `category`
    ON `content`.`category_id` = `category`.`id`
And now in Laravel's query builder:

DB::table('content')
    ->join('category', 'content.category_id', '=', 'category.id')
    ->select(['content.id', 'category.name'])
    ->get();
And now using Eloquent models:

// app/Models/Content.php
namespace App\Models;

class Content
{
    protected $table = 'content';

    public function category()
    {
        return $this->belongsTo('App\Models\Category', 'category_id');
    }
}


// app/Models/category.php
namespace App\Models;

class Category
{
    protected $table = 'category';

    public function content()
    {
        return $this->hasMany('App\Models\Content', 'category_id');
    }
}
Now you can use this model to do all sorts. For example, to do what you were originally trying:

// some controller somewhere
use App\Models\Content;

class SomeController
{
    public function index()
    {
        $content = Content::with('category')->get();

        return View::make('ALL/Contents')->with('AllContent', $content);
    }
}

// views/ALL/Contents.blade.php
<ul>
    @foreach ($AllContent as $content)
        <li>
            {{ $content->id }} - {{ $content->category->name }}
        </li>
    @endforeach
</ul>
But alternatively you can return the content id/category name as a key=>value array:

// in the controller
$content = Content::with('category')->lists('category.name', 'id');

// in the view
<ul>
    @foreach ($AllContent as $id => $category)
        <li>
            {{ $id }} - {{ $category }}
        </li>
    @endforeach
</ul>
This is all untested, but should work. If it doesn't, it should at least give you an idea of how it all goes together.